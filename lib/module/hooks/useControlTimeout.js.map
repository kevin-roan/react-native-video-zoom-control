{"version":3,"sources":["useControlTimeout.tsx"],"names":["useEffect","useState","useControlTimeout","controlTimeout","controlTimeoutDelay","mounted","showControls","setShowControls","alwaysShowControls","_controlTimeout","_setControlTimeout","_clearTimeout","setClearTimeout","setControlTimeout","prevState","clearControlTimeout","resetControlTimeout","hideControls","setTimeout","clearTimeout"],"mappings":"AAAA,SAAkCA,SAAlC,EAA6CC,QAA7C,QAA4D,OAA5D;AAWA,OAAO,MAAMC,iBAAiB,GAAG,QAON;AAAA,MAPO;AAChCC,IAAAA,cADgC;AAEhCC,IAAAA,mBAFgC;AAGhCC,IAAAA,OAHgC;AAIhCC,IAAAA,YAJgC;AAKhCC,IAAAA,eALgC;AAMhCC,IAAAA;AANgC,GAOP;AACzB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,EAAtD;AACA,QAAM,CAACU,aAAD,EAAgBC,eAAhB,IAAmCX,QAAQ,EAAjD;;AAEA,QAAMY,iBAAiB,GAAG,MAAM;AAC9BH,IAAAA,kBAAkB,CAAEI,SAAD,IAAe,CAACA,SAAjB,CAAlB;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,MAAM;AAChCH,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;;AAIA,QAAMI,mBAAmB,GAAG,MAAM;AAChCD,IAAAA,mBAAmB;AACpB,GAFD;;AAIA,QAAME,YAAY,GAAG,MAAM;AACzB,QAAIZ,OAAO,IAAIC,YAAX,IAA2B,CAACE,kBAAhC,EAAoD;AAClDD,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAJD;;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,cAAc,GAAGe,UAAU,CAAC,MAAM;AAChCD,MAAAA,YAAY;AACb,KAF0B,EAExBb,mBAFwB,CAA3B;AAIA,WAAO,MAAM;AACXe,MAAAA,YAAY,CAAChB,cAAD,CAAZ;AACD,KAFD;AAGD,GATQ,EASN,CAACM,eAAD,CATM,CAAT;AAWAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,aAAJ,EAAmB;AACjBQ,MAAAA,YAAY,CAAChB,cAAD,CAAZ;AACAS,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAJa,CAKd;;AACD,GANQ,EAMN,CAACD,aAAD,CANM,CAAT;AAQA,SAAO;AACLI,IAAAA,mBADK;AAELC,IAAAA,mBAFK;AAGLC,IAAAA,YAHK;AAILL,IAAAA,eAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CAvDM","sourcesContent":["import {Dispatch, SetStateAction, useEffect, useState} from 'react';\n\ninterface ControlTimeoutProps {\n  controlTimeout: ReturnType<typeof setTimeout>;\n  controlTimeoutDelay: number;\n  mounted: boolean;\n  showControls: boolean;\n  setShowControls: Dispatch<SetStateAction<boolean>>;\n  alwaysShowControls: boolean;\n}\n\nexport const useControlTimeout = ({\n  controlTimeout,\n  controlTimeoutDelay,\n  mounted,\n  showControls,\n  setShowControls,\n  alwaysShowControls,\n}: ControlTimeoutProps) => {\n  const [_controlTimeout, _setControlTimeout] = useState<boolean>();\n  const [_clearTimeout, setClearTimeout] = useState<boolean>();\n\n  const setControlTimeout = () => {\n    _setControlTimeout((prevState) => !prevState);\n  };\n\n  const clearControlTimeout = () => {\n    setClearTimeout(true);\n  };\n\n  const resetControlTimeout = () => {\n    clearControlTimeout();\n  };\n\n  const hideControls = () => {\n    if (mounted && showControls && !alwaysShowControls) {\n      setShowControls(false);\n    }\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    controlTimeout = setTimeout(() => {\n      hideControls();\n    }, controlTimeoutDelay);\n\n    return () => {\n      clearTimeout(controlTimeout);\n    };\n  }, [_controlTimeout]);\n\n  useEffect(() => {\n    if (_clearTimeout) {\n      clearTimeout(controlTimeout);\n      setClearTimeout(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_clearTimeout]);\n\n  return {\n    clearControlTimeout,\n    resetControlTimeout,\n    hideControls,\n    setClearTimeout,\n    setControlTimeout,\n  };\n};\n"]}