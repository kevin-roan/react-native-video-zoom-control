{"version":3,"sources":["usePanResponders.tsx"],"names":["usePanResponders","duration","seekerOffset","volumeOffset","loading","seeking","seekerPosition","seek","seekerWidth","clearControlTimeout","setVolumePosition","setSeekerPosition","setSeeking","setControlTimeout","onEnd","horizontal","inverted","volumePanResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_evt","gestureState","diff","dx","dy","position","onPanResponderRelease","seekPanResponder","evt","nativeEvent","locationX","percent","time"],"mappings":"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","sourcesContent":["import {Dispatch, SetStateAction, useEffect} from 'react';\nimport {PanResponder} from 'react-native';\n\ninterface PanRespondersProps {\n  duration: number;\n  seekerOffset: number;\n  volumeOffset: number;\n  loading: boolean;\n  seeking: boolean;\n  seekerPosition: number;\n  seek?: (time: number, tolerance?: number) => void;\n  seekerWidth: number;\n  clearControlTimeout: () => void;\n  setVolumePosition: (position: number) => void;\n  setSeekerPosition: (position: number) => void;\n  setSeeking: Dispatch<SetStateAction<boolean>>;\n  setControlTimeout: () => void;\n  onEnd: () => void;\n  horizontal?: boolean;\n  inverted?: boolean;\n}\n\nexport const usePanResponders = ({\n  duration,\n  seekerOffset,\n  volumeOffset,\n  loading,\n  seeking,\n  seekerPosition,\n  seek,\n  seekerWidth,\n  clearControlTimeout,\n  setVolumePosition,\n  setSeekerPosition,\n  setSeeking,\n  setControlTimeout,\n  onEnd,\n  horizontal = true,\n  inverted = false,\n}: PanRespondersProps) => {\n  const volumePanResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderGrant: () => {\n      clearControlTimeout();\n    },\n    onPanResponderMove: (_evt, gestureState) => {\n      const diff = horizontal ? gestureState.dx : gestureState.dy;\n      const position = volumeOffset + diff * (inverted ? -1 : 1);\n      setVolumePosition(position);\n    },\n    onPanResponderRelease: () => {\n      setControlTimeout();\n    },\n  });\n\n  const seekPanResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderGrant: (evt) => {\n      setSeeking(true);\n      clearControlTimeout();\n      const position = evt.nativeEvent.locationX;\n      setSeekerPosition(position);\n    },\n    onPanResponderMove: (_evt, gestureState) => {\n      const diff = horizontal ? gestureState.dx : gestureState.dy;\n      const position = seekerOffset + diff * (inverted ? -1 : 1);\n      setSeekerPosition(position);\n      setSeeking(true);\n    },\n    onPanResponderRelease: () => {\n      const percent = seekerPosition / seekerWidth;\n      const time = duration * percent;\n\n      if (time >= duration && !loading) {\n        if (typeof onEnd === 'function') {\n          onEnd();\n        }\n      }\n\n      setSeeking(false);\n      seek && seek(time);\n    },\n  });\n\n  useEffect(() => {\n    if (seeking) {\n      const percent = seekerPosition / seekerWidth;\n      const time = duration * percent;\n      seek && seek(time);\n    }\n  }, [duration, seek, seekerPosition, seekerWidth, seeking]);\n\n  return {volumePanResponder, seekPanResponder};\n};\n"]}