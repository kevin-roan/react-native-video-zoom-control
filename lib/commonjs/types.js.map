{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { RefObject } from \"react\";\nimport type { ViewStyle, StyleProp, Animated } from \"react-native\";\nimport type Reanimated from \"react-native-reanimated\";\nimport type { StyleProps } from \"react-native-reanimated\";\nimport type { VideoRef, ReactVideoProps } from \"react-native-video\";\n\nexport type WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n  [Property in Key]-?: Type[Property];\n};\n\nexport type VideoAnimations = {\n  AnimatedView: typeof Reanimated.View | typeof Animated.View;\n  hideControlAnimation: () => void;\n  showControlAnimation: () => void;\n  bottomControl: StyleProps; // type AnimatedViewStyle = Animated.AnimatedProps<ViewProps>['style'];\n  topControl: StyleProps;\n  controlsOpacity: StyleProps;\n};\n\nexport interface VideoPlayerProps extends ReactVideoProps {\n  animations?: VideoAnimations;\n  useAnimations?: (controlAnimationTiming: number) => VideoAnimations;\n  /**\n   * If true, clicking the fullscreen button will toggle the <Video />\n   * component between cover/contain, set to false\n   * if you want to customize fullscreen behaviour\n   *\n   * @default false\n   */\n  toggleResizeModeOnFullscreen?: boolean;\n\n  /**\n   * The amount of time (in milliseconds) to animate the controls in and out.\n   *\n   * @default 500\n   */\n  controlAnimationTiming?: number;\n\n  /**\n   * Tapping twice within this amount of time in milliseconds is considered a double tap.\n   * Single taps will not be actioned until this time has expired\n   *\n   * @default 100\n   */\n  doubleTapTime?: number;\n\n  /**\n   * The VideoPlayer fullscreen state.\n   *\n   * @default false\n   */\n  isFullscreen?: boolean;\n\n  /**\n   * Show or hide the controls on first render\n   *\n   * @default false\n   */\n  showOnStart?: boolean;\n\n  /**\n   * Show or hide the controls on end of video\n   *\n   * @default false\n   */\n  showOnEnd?: boolean;\n\n  /**\n   * Always show controls.\n   *\n   * @default false\n   */\n  alwaysShowControls?: boolean;\n\n  /**\n   * Title of the video\n   */\n  title?: string;\n\n  /**\n   * If true, show the time remaing, else show the current time in the Player.\n   *\n   * @default false\n   */\n  showTimeRemaining?: boolean;\n\n  /**\n   * Show duration of the media.\n   *\n   * @default false\n   */\n  showDuration?: boolean;\n\n  /**\n   * If true, convert time to hours in the Player\n   *\n   * @default false\n   */\n  showHours?: boolean;\n\n  /**\n   * Function fired when back button is pressed, override if using custom navigation\n   */\n  onBack?: () => void;\n\n  /**\n   * Fired when the video enters fullscreen after the fullscreen button is pressed\n   */\n  onEnterFullscreen?: () => void;\n\n  /**\n   * Fired when the video exits fullscreen after the fullscreen button is pressed\n   */\n  onExitFullscreen?: () => void;\n\n  /**\n   * Fired when the controls disappear\n   */\n  onHideControls?: () => void;\n\n  /**\n   * Fired when the controls appear\n   */\n  onShowControls?: () => void;\n\n  /**\n   * Fired when the video is paused after the play/pause button is pressed\n   */\n  onPause?: () => void;\n\n  /**\n   * Fired when the video begins playing after the play/pause button is pressed\n   */\n  onPlay?: () => void;\n\n  /**\n   * Hide controls after X amount of time in milliseconds\n   *\n   * @default 15000\n   */\n  controlTimeoutDelay?: number;\n\n  /**\n   * If true, single tapping anywhere on the video (other than a control) toggles between playing and paused.\n   *\n   * @default false\n   */\n  tapAnywhereToPause?: boolean;\n\n  /**\n   * StyleSheet passed to the <Video /> component\n   *\n   */\n  videoStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Container styles\n   *\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Fill/handle colour of the seekbar\n   *\n   * @default '#FFF'\n   */\n  seekColor?: string;\n\n  /**\n   * Hide the back button\n   *\n   * @default false\n   */\n  disableBack?: boolean;\n\n  /**\n   * Hide the Volume control\n   *\n   * @default false\n   */\n  disableVolume?: boolean;\n\n  /**\n   * Hide the fullscreen button\n   *\n   * @default false\n   */\n  disableFullscreen?: boolean;\n\n  /**\n   * Hide the timer\n   *\n   * @default false\n   */\n  disableTimer?: boolean;\n\n  /**\n   * Hide the seekbar\n   *\n   * @default false\n   */\n  disableSeekbar?: boolean;\n\n  /**\n   * Hide the play/pause toggle and the rewind/forward buttons\n   *\n   * @default false\n   */\n  disablePlayPause?: boolean;\n\n  /**\n   * Hide the rewind/forward buttons without hiding the play/pause button\n   *\n   * @default false\n   */\n  disableSeekButtons?: boolean;\n\n  /**\n   * Hide the transparent overlay which is active when the controls are shown. Generally used when you want to disable all the controls.\n   *\n   * @default false\n   */\n  disableOverlay?: boolean;\n\n  /**\n   * When using the default React Native navigator and do not override the `onBack` function,\n   * you'll need to pass the navigator to the VideoPlayer for it to function\n   *\n   * @default null\n   */\n  navigator?: any;\n\n  /**\n   * Pass ref to the `<Video/>` component\n   *\n   * @default false\n   */\n  videoRef?: RefObject<VideoRef>;\n\n  /**\n   * Number of seconds to rewind or forward.\n   *\n   * @default 15\n   */\n  rewindTime?: number;\n\n  /**\n   * Object allowing fine grained control of the pan responder\n   *\n   * @default { horizontal: true, inverted: false }\n   */\n  pan?: {\n    /**\n     * Boolean representing if the player is oriented horizontally or vertically\n     *\n     * @default true\n     */\n    horizontal?: boolean;\n\n    /**\n     * Boolean representing if the player controls pan gesture should be inverted\n     *\n     * @default false\n     */\n    inverted?: boolean;\n  };\n  /**\n   * testID selector for testing\n   */\n  testID?: string;\n\n  /** \n  * seletedCallback\n  a callback function that gets called when the user clicks on the resolution modal,\n  params: resolution (that can be , auto,high,medium,low)\n  */\n  selectResolutionCallback?: (resolution: string) => void;\n\n  /*\n   * disable all controls\n   */\n  disableAllControls?: boolean;\n  disableResolution?:boolean;\n\n  videoUrls?:string[]\n}\n"],"mappings":""}