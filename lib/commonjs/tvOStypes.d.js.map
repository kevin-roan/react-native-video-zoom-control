{"version":3,"names":["_react","_interopRequireDefault","require","obj","__esModule","default"],"sources":["tvOStypes.d.ts"],"sourcesContent":["import React from 'react';\nimport {ScrollViewProps} from 'react-native';\n\ndeclare module 'react-native' {\n  interface ViewProps {\n    /**\n     * TV next focus down (see documentation for the View component).\n     */\n    nextFocusDown?: number;\n\n    /**\n     * TV next focus forward (see documentation for the View component).\n     *\n     * @platform android\n     */\n    nextFocusForward?: number;\n\n    /**\n     * TV next focus left (see documentation for the View component).\n     */\n    nextFocusLeft?: number;\n\n    /**\n     * TV next focus right (see documentation for the View component).\n     */\n    nextFocusRight?: number;\n\n    /**\n     * TV next focus up (see documentation for the View component).\n     */\n    nextFocusUp?: number;\n  }\n\n  export const useTVEventHandler: (\n    handleEvent: (event: HWEvent) => void,\n  ) => void;\n\n  export const TVEventControl: {\n    enableTVMenuKey(): void;\n    disableTVMenuKey(): void;\n    enableTVPanGesture(): void;\n    disableTVPanGesture(): void;\n  };\n\n  export type HWEvent = {\n    eventType:\n      | 'up'\n      | 'down'\n      | 'right'\n      | 'left'\n      | 'blur'\n      | 'focus'\n      | 'pan'\n      | string;\n    eventKeyAction?: -1 | 1 | 0 | number;\n    tag?: number;\n    body?: {\n      state: 'Began' | 'Changed' | 'Ended';\n      x: number;\n      y: number;\n      velocityx: number;\n      velocityy: number;\n    };\n  };\n\n  export class TVEventHandler {\n    enable<T extends React.Component<unknown>>(\n      component?: T,\n      callback?: (component: T, data: HWEvent) => void,\n    ): void;\n\n    disable(): void;\n  }\n\n  export interface FocusGuideProps extends ViewProps {\n    /**\n     * Array of `Component`s to register as destinations with `UIFocusGuide`\n     */\n    destinations?: (\n      | null\n      | number\n      | React.Component<any, any>\n      | React.ComponentClass<any>\n    )[];\n  }\n\n  /**\n   * This component provides support for Apple's `UIFocusGuide` API,\n   * to help ensure that focusable controls can be navigated to,\n   * even if they are not directly in line with other controls.\n   * An example is provided in `RNTester` that shows two different ways of using this component.\n   * https://github.com/react-native-tvos/react-native-tvos/blob/tvos-v0.63.4/RNTester/js/examples/TVFocusGuide/TVFocusGuideExample.js\n   */\n  export class TVFocusGuideView extends React.Component<FocusGuideProps> {}\n\n  export interface TVTextScrollViewProps extends ScrollViewProps {\n    /**\n     * The duration of the scroll animation when a swipe is detected.\n     * Default value is 0.3 s\n     */\n    scrollDuration?: number;\n    /**\n     * Scrolling distance when a swipe is detected\n     * Default value is half the visible height (vertical scroller)\n     * or width (horizontal scroller)\n     */\n    pageSize?: number;\n    /**\n     * If true, will scroll to start when focus moves out past the beginning\n     * of the scroller\n     * Defaults to true\n     */\n    snapToStart?: boolean;\n    /**\n     * If true, will scroll to end when focus moves out past the end of the\n     * scroller\n     * Defaults to true\n     */\n    snapToEnd?: boolean;\n\n    /**\n     * Called when the scroller comes into focus (e.g. for highlighting)\n     */\n    onFocus?(evt: HWEvent): void;\n\n    /**\n     * Called when the scroller goes out of focus\n     */\n    onBlur?(evt: HWEvent): void;\n  }\n\n  export class TVTextScrollView extends React.Component<TVTextScrollViewProps> {}\n\n  export interface PressableStateCallbackType {\n    readonly focused: boolean;\n  }\n}\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA0B,SAAAD,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA"}